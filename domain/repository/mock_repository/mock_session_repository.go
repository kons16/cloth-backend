// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// CheckBySession mocks base method
func (m *MockSession) CheckBySession(sessionID string) int {
	// m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBySession", sessionID)
	ret0, _ := ret[0].(int)
	return ret0
}

// CheckBySession indicates an expected call of CheckBySession
func (mr *MockSessionMockRecorder) CheckBySession(sessionID interface{}) *gomock.Call {
	// mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBySession", reflect.TypeOf((*MockSession)(nil).CheckBySession), sessionID)
}

// CreateUserSession mocks base method
func (m *MockSession) CreateUserSession(id int, sessionID string) error {
	// m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSession", id, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserSession indicates an expected call of CreateUserSession
func (mr *MockSessionMockRecorder) CreateUserSession(id, sessionID interface{}) *gomock.Call {
	// mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSession", reflect.TypeOf((*MockSession)(nil).CreateUserSession), id, sessionID)
}

// Logout mocks base method
func (m *MockSession) Logout(sessionID string) bool {
	// m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", sessionID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockSessionMockRecorder) Logout(sessionID interface{}) *gomock.Call {
	// mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockSession)(nil).Logout), sessionID)
}
